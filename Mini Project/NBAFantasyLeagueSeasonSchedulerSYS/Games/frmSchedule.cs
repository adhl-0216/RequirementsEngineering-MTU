using NBAFantasyLeagueSeasonSchedulerSYS.Teams;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace NBAFantasyLeagueSeasonSchedulerSYS.Games
{
    public partial class frmSchedule : Form
    {
        private static new Form Parent;
        private static List<Team> allTeams;
        private static List<Game> allGames = new List<Game>(); //temp
        private static bool scheduleExists = false;

        public frmSchedule(Form parent)
        {
            InitializeComponent();
            allTeams = new List<Team>();
            frmUpdateTeam.retrieveTeams(ref allTeams);
            Parent = parent;
        }

        private void frmSchedule_FormClosing(object sender, FormClosingEventArgs e)
        {
            Parent.Show();
        }

        private void frmSchedule_Load(object sender, EventArgs e)
        {
            foreach (Team team in allTeams)
            {
                dtgTeamDetails.Rows.Add(team.TeamID, team.TeamName, team.Gm, team.HeadCoach, team.AsstCoach, team.HomeCourt);
            }
        }

        private void btnSchedule_Click(object sender, EventArgs e)
        {
            
            if (!scheduleExists) {
                DialogResult cfm = MessageBox.Show("Proceed with these Teams?", "Teams Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (cfm == DialogResult.Yes)
                {
                    List<string> allGameID = new List<string>();

                    generateGameID(new Queue<Team>(allTeams), ref allGameID);

                    Console.WriteLine(string.Join("\n", allGameID));

                    MessageBox.Show("Schedule has been auto-generated by algorithm.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    scheduleExists = true;
                }
            }else
            {
                MessageBox.Show("A Schedule has already been generated, go to [Reschedule Game] to reschedule a specific Game, or [Admin]>[View Schedule] to view the generated Schedule.", "Schedule Already Exists", MessageBoxButtons.OK, MessageBoxIcon.Information);
                this.Close();
            }
        }


        //scheduling algorithm
        public void generateGameID(Queue<Team> teamsQueue, ref List<string> allGameID)
        {
            if (teamsQueue.Count == 0) return;
            Team t1 = teamsQueue.Dequeue();
            foreach (Team t2 in teamsQueue)
            {
                allGameID.Add($"{t1.TeamID}@{t2.TeamID}:1");
                allGameID.Add($"{t2.TeamID}@{t1.TeamID}:2");
                allGameID.Add($"{t1.TeamID}@{t2.TeamID}:3");
            }

            generateGameID(teamsQueue, ref allGameID);
        }
        private bool checkTeamsStatus(Team team, ref DateTime gameDate)
        {
            DateTime temp = gameDate;
            Game game = allGames.Find(g => 
                (g.gameDate == temp) && ((g.home == team) || (g.away == team))
            );
            if (game != null)
            {
                gameDate = gameDate.AddDays(1);
                return checkTeamsStatus(team, ref gameDate);
            }else return true;
        }

        private DateTime randomDate(DateTime start)
        {
            Random gen = new Random();
            DateTime end = start.AddYears(1);
            int range = (end - start).Days;
            return start.AddDays(gen.Next(range));
        }
    }
}
