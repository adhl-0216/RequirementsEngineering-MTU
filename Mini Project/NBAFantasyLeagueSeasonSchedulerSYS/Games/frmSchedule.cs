using NBAFantasyLeagueSeasonSchedulerSYS.Teams;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace NBAFantasyLeagueSeasonSchedulerSYS.Games
{
    public partial class frmSchedule : Form
    {
        private static new Form Parent;
        private static List<Team> allTeams;
        private static List<Game> allGames = new List<Game>(); //temp
        private static bool scheduleExists = false;

        public frmSchedule(Form parent)
        {
            InitializeComponent();
            allTeams = new List<Team>();
            frmUpdateTeam.retrieveTeams(ref allTeams);
            Parent = parent;
        }

        private void frmSchedule_FormClosing(object sender, FormClosingEventArgs e)
        {
            Parent.Show();
        }

        private void frmSchedule_Load(object sender, EventArgs e)
        {
            foreach (Team team in allTeams)
            {
                dtgTeamDetails.Rows.Add(team.TeamID, team.TeamName, team.Gm, team.HeadCoach, team.AsstCoach, team.HomeCourt);
            }
        }

        private void btnSchedule_Click(object sender, EventArgs e)
        {
            
            if (!scheduleExists) {
                DialogResult cfm = MessageBox.Show("Proceed with these Teams?", "Teams Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (cfm == DialogResult.Yes)
                {
                    generateSchedule(dtpSeasonStart.Value);
                    MessageBox.Show("Schedule has been auto-generated by algorithm.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    scheduleExists = true;
                }
            }else
            {
                MessageBox.Show("A Schedule has already been generated, go to [Reschedule Game] to reschedule a specific Game, or [Admin]>[View Schedule] to view the generated Schedule.", "Schedule Already Exists", MessageBoxButtons.OK, MessageBoxIcon.Information);
                this.Close();
            }
        }

        //scheduling algorithm
        private void generateSchedule(DateTime seasonStart)
        {
            allGames.Clear();
            int count = 0;

            foreach (Team home in allTeams)
            {
                foreach (Team away in allTeams)
                {
                    if (home == away) continue;
                    DateTime gameDate = randomDate(seasonStart);
                    if (checkTeamsStatus(home, ref gameDate))
                    {
                        for (int i = 1; i <= 3; i++)
                        {
                            string gameID = $"{away.TeamID}@{home.TeamID}:{i}";


                            allGames.Add(new Game(gameID, home, away, gameDate, new TimeSpan(20, 0, 0)));
                            //Console.WriteLine(allGames[count].gameID + " " + allGames[count].gameDate.ToShortDateString());

                            count++;
                        }
                    }
                }
            }

            //foreach (Game game in allGames)
            //{
                Team targetH = allTeams[0];
                Team targetA = allTeams[1];

                Game[] dupes = allGames.FindAll(g => ((g.home == targetH) && (g.away == targetA)) || ((g.home == targetA) && (g.away == targetH))).ToArray();

                foreach (Game x in dupes)
                {
                    Console.WriteLine(x.gameID + " " + x.gameDate.ToShortDateString());
                }


                Console.WriteLine(dupes.Count());
            //}

            //Console.WriteLine(count + " games generated.");
        }

        private bool checkTeamsStatus(Team team, ref DateTime gameDate)
        {
            DateTime temp = gameDate;
            Game game = allGames.Find(g => 
                (g.gameDate == temp) && ((g.home == team) || (g.away == team))
            );
            if (game != null)
            {
                gameDate = gameDate.AddDays(1);
                return checkTeamsStatus(team, ref gameDate);
            }else return true;
        }

        private DateTime randomDate(DateTime start)
        {
            Random gen = new Random();
            DateTime end = start.AddYears(1);
            int range = (end - start).Days;
            return start.AddDays(gen.Next(range));
        }
    }
}
